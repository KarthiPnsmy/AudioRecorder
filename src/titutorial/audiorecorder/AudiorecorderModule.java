/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package titutorial.audiorecorder;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import android.content.Context;
import android.media.MediaRecorder;
import android.os.Environment;

@Kroll.module(name="Audiorecorder", id="titutorial.audiorecorder")
public class AudiorecorderModule extends KrollModule
{
	// output format constants
	@Kroll.constant public static final int OutputFormat_MPEG_4 = MediaRecorder.OutputFormat.MPEG_4;
	@Kroll.constant public static final int OutputFormat_THREE_GPP = MediaRecorder.OutputFormat.THREE_GPP;

	//audio encoder
	@Kroll.constant public static final int AudioEncoder_AAC = MediaRecorder.AudioEncoder.AAC;
	@Kroll.constant public static final int AudioEncoder_AMR_NB = MediaRecorder.AudioEncoder.AMR_NB;
	@Kroll.constant public static final int AudioEncoder_AMR_WB = MediaRecorder.AudioEncoder.AMR_WB;
	@Kroll.constant public static final int AudioEncoder_DEFAULT = MediaRecorder.AudioEncoder.DEFAULT;

	private MediaRecorder recorder = null;
	private String fullFileName = null;
	private Boolean isRecording = false;
	private String outPutFileName = null;
	private String AUDIO_RECORDER_FOLDER = "audio_recorder";

	private KrollFunction successCallback = null;
	private KrollFunction errorCallback = null;

	// Standard Debugging variables
	private static final String TAG = "AudiorecorderModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public AudiorecorderModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@SuppressWarnings("deprecation")
	private KrollFunction getCallback(final KrollDict options, final String name) {
		return (KrollFunction) options.get(name);
	}

	/* Checks if external storage is available for read and write */
	public boolean isExternalStorageWritable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state)) {
	        return true;
	    }
	    return false;
	}

	private void sendSuccessEvent(String filepath) {
		if (successCallback != null) {
			//System.out.println("@@## inside: successCallback");
			//System.out.println("@@## filepath: " + filepath);
			HashMap<String, String> event = new HashMap<String, String>();
			event.put("filePath", filepath);
			event.put("fileName", outPutFileName);

			// Fire an event directly to the specified listener (callback)
			successCallback.call(getKrollObject(), event);
		}
	}

	private void sendErrorEvent(String message) {
		//System.out.println("@@## inside: sendErrorEvent");
		//System.out.println("@@## message: " + message);
		if (errorCallback != null) {
			HashMap<String, String> event = new HashMap<String, String>();
			event.put("message", message);

			// Fire an event directly to the specified listener (callback)
			errorCallback.call(getKrollObject(), event);
		}
	}

	@Kroll.method
	public void registerCallbacks(HashMap args) {
		Object callback;

		// Save the callback functions, verifying that they are of the correct type
		if (args.containsKey("success")) {
			callback = args.get("success");
			if (callback instanceof KrollFunction) {
				successCallback = (KrollFunction) callback;
			}
		}

		if (args.containsKey("error")) {
			callback = args.get("error");
			if (callback instanceof KrollFunction) {
				errorCallback = (KrollFunction) callback;
			}
		}

		//System.out.println("@@## Callbacks registered");
	}

	private String getFilename(int selectedFormat, String selectedFileName, String selectedDirName, String location) {
		String directoryName = AUDIO_RECORDER_FOLDER;
		if (selectedDirName != null && selectedDirName.length() > 0) {
			directoryName = selectedDirName;
		}

		String fileName = System.currentTimeMillis() + "";
		if (selectedFileName != null && selectedFileName.length() > 0) {
			fileName = selectedFileName;
		}

		String fileFormat = ".3gp";
		if (selectedFormat == OutputFormat_THREE_GPP) {
			fileFormat = ".3gp";
		} else if (selectedFormat == OutputFormat_MPEG_4) {
			fileFormat = ".mp4";
		}
		outPutFileName = fileName + fileFormat;
		//System.out.println("@@## location: " + location);
		//System.out.println("@@## outPutFileName: " + outPutFileName);
		System.out.println("@@## chking external storage: " + isExternalStorageWritable());
		if(location.equals("internal")){
			File audioDirectory = new File(TiApplication.getAppRootOrCurrentActivity().getCacheDir(), directoryName);
			//System.out.println("@@## audioDirectory.exists(): " + audioDirectory.exists());
			if (!audioDirectory.exists()) {
				audioDirectory.mkdirs();
			}
			fullFileName = (audioDirectory.getAbsolutePath() + "/" + outPutFileName);
			//System.out.println("@@## internal fullFileName: " + fullFileName);
			return fullFileName;
		} else {
			if(isExternalStorageWritable()){
				String packageName = TiApplication.getAppRootOrCurrentActivity().getPackageName();
				//System.out.println("@@## packageName: " + packageName);
				String sdCardPath = Environment.getExternalStorageDirectory().getPath();
				File audioDirectory = new File(sdCardPath, packageName+"/"+directoryName);

				if (!audioDirectory.exists()) {
					audioDirectory.mkdirs();
				}

				fullFileName = (audioDirectory.getAbsolutePath() + "/" + outPutFileName);
				//System.out.println("@@## external fullFileName: " + fullFileName);
				return fullFileName;
			} else {
				return null;
			}
		}
	}

	private MediaRecorder.OnErrorListener errorListener = new MediaRecorder.OnErrorListener() {
		@Override
		public void onError(MediaRecorder mr, int what, int extra) {
			//System.out.println("@@## Error: " + what + ", " + extra);
		}
	};

	private MediaRecorder.OnInfoListener infoListener = new MediaRecorder.OnInfoListener() {
		@Override
		public void onInfo(MediaRecorder mr, int what, int extra) {
			//System.out.println("@@## Warning: " + what + ", " + extra);
			if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
				//System.out.println("@@## Maximum Duration Reached");
				stopRecording();
			} else if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED) {
				//System.out.println("@@## Maximum Filesize Reached");
				stopRecording();
			}
		}
	};

	@Kroll.method
	public void startRecording(HashMap args) {
		if(isRecording){
			sendErrorEvent("Another audio record is inprogress");
		} else {
			recorder = null;
			KrollDict options = new KrollDict(args);

			int fileFormat = options.optInt("outputFormat", OutputFormat_THREE_GPP);
			int audioEncoder = options.optInt("audioEncoder", AudioEncoder_AMR_NB);
			int audioEncodingBitRate = options.optInt("audioEncodingBitRate", 16000);
			int audioSamplingRate = options.optInt("audioSamplingRate", 22050);

			String fileName = (String) options.get("fileName");
			String fileDirectory = (String) options.get("directoryName");
			String fileLocation = "external";
			//System.out.println("@@## fileFormat: " + fileFormat);
			//System.out.println("@@## fileName: " + fileName);
			//System.out.println("@@## fileDirectory: " + fileDirectory);
			registerCallbacks(args);
			if (options.containsKey("fileLocation")) {
				fileLocation = (String) options.get("fileLocation");
			}
			//System.out.println("@@## fileLocation : " + fileLocation);
			String outputFileName = getFilename(fileFormat, fileName, fileDirectory, fileLocation);
			//System.out.println("@@## outputFileName = "+outputFileName);
			if(outputFileName == null || outputFileName == ""){
				sendErrorEvent("External storage not available");
				return;
			}

			recorder = new MediaRecorder();

			recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
			recorder.setOutputFormat(fileFormat);
			recorder.setAudioEncoder(audioEncoder);
			recorder.setAudioEncodingBitRate(audioEncodingBitRate);
			recorder.setAudioSamplingRate(audioSamplingRate);

			if (options.containsKey("maxDuration")) {
				int maxDurValue = options.optInt("maxDuration", 5000);
				//System.out.println("@@## maxDurValue : " + maxDurValue);
				try {
					recorder.setMaxDuration(maxDurValue);
				} catch (RuntimeException e) {
					//System.out.println("@@## setMaxDuration failed !");
				}
			}

			if (options.containsKey("maxFileSize")) {
				int maxFileSizeValue = options.optInt("maxFileSize", 5000);
				//System.out.println("@@## maxFileSize : " + maxFileSizeValue);
				try {
					recorder.setMaxFileSize(maxFileSizeValue);
				} catch (RuntimeException e) {
					//System.out.println("@@## setMaxFileSize failed !");
				}
			}

			recorder.setOutputFile(outputFileName);
			recorder.setOnErrorListener(errorListener);
			recorder.setOnInfoListener(infoListener);

			try {
				recorder.prepare();
				recorder.start();
				isRecording = true;
			} catch (IllegalStateException e) {
				//System.out.println("@@## Error1 e = "+e);
				e.printStackTrace();
				isRecording = false;
				sendErrorEvent(e.toString());
			} catch (IOException e) {
				e.printStackTrace();
				//System.out.println("@@## Error3 e = "+e);
				isRecording = false;
				sendErrorEvent(e.toString());
			}
		}
	}

	@Kroll.method
	public void stopRecording() {
		//System.out.println("@@## called: stopRecording");
		if (null != recorder) {
			try {
				recorder.stop();
			} catch (IllegalStateException e) {
				//System.out.println("@@## Error2 IllegalStateException e = "+e);
				e.printStackTrace();
				sendErrorEvent(e.toString());
			}
			recorder.reset();
			recorder.release();
			recorder = null;
			isRecording = false;
			sendSuccessEvent(fullFileName);
		}
	}

	@Kroll.method
	public Boolean isRecording() {
		return isRecording;
	}

    @Kroll.method
    public Integer getMaxAmplitude() {
        return isRecording ? recorder.getMaxAmplitude() : -1;
    }

}

